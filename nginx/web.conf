upstream api.neuralroots.in {
    # Container: neural-roots-django-web-1
    #     networks:
    #         neural-roots-django_default (reachable)
    #     IP address: 172.22.0.2
    #     exposed ports: 8000/tcp
    #     default port: 8000
    #     using port: 8000
    server 172.22.0.2:8000;
}


# Redirect all HTTP traffic to HTTPS
server {
    listen 80;
    server_name neuralroots.in www.neuralroots.in api.neuralroots.in;
    return 301 https://$host$request_uri;
}

# HTTPS server block for React frontend
server {
    listen 443 ssl;
    server_name neuralroots.in www.neuralroots.in;

    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_certificate /etc/nginx/certs/neuralroots.in.crt;
    ssl_certificate_key /etc/nginx/certs/neuralroots.in.key;
    ssl_dhparam /etc/nginx/certs/neuralroots.in.dhparam.pem;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/certs/neuralroots.in.chain.pem;

    root /usr/share/nginx/html;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    error_page 404 /404.html;
    location = /404.html {
        root /var/www/react;
        internal;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /var/www/react;
        internal;
    }
}

# HTTPS server block for Django backend
server {
    listen 443 ssl;
    server_name api.neuralroots.in;

    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_certificate /etc/nginx/certs/neuralroots.in.crt;
    ssl_certificate_key /etc/nginx/certs/neuralroots.in.key;
    ssl_dhparam /etc/nginx/certs/neuralroots.in.dhparam.pem;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/certs/neuralroots.in.chain.pem;

    include /etc/nginx/vhost.d/default;
    
    location / {
        proxy_pass http://api.neuralroots.in;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}